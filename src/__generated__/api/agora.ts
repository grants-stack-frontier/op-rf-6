/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Agora's OP API (Beta)
 * Welcome to the Collective API documentation. This API provides various endpoints to interact with the Collective platform, focusing on RetroPGF (Retroactive Public Goods Funding) for Optimism. Below is a comprehensive guide to the API endpoints, categorized by functionality.

### Current Status
- **Beta**: This API is currently in beta. Endpoints marked as "Not Live" are under development and available for feedback only.

### API Categories
Live and stable. 
- **auth**: Authenticate with the Agora API
- **Round 4**: Data related to Retro Funding for Optimism Round 4
- **RetroFunding**: Data related to Retro Funding for Optimism Round 4 and beyond
- **projects**: Data related to RetroPGF Projects
- **RetroFundingRounds**: Data related to RetroPGF Funding Rounds
- **RetroFundingBallots**: Data related to RetroPGF Funding Ballots
- **impactMetrics**: Data related to the Impact Metrics for RetroFunding Round 4
- **RetroFundingImpactMetrics**: Connect RetroPGF to Impact Metrics
- **comments**: Data related to RetroPGF Project Comments
- **commentsVotes**: Data related to RetroPGF Project Comments' Votes
- **delegates**: Delegates data
- **delegations**: Delegations data
- **proposals**: Proposal data
- **votes**: Vote data
- **contracts**: Data for the current onchain contracts

Not Live.
- **Round 5**: Data related to Retro Funding for Optimism Round 5
- 0.2.0: **projects** Round 5 Projects with mock data
- 0.2.1: **RetroFundingBallots** Round 5 Ballots with mock data
- 0.2.2: **DistributionStrategies** Round 5 Distribution strategies with mock data
- 0.2.3: Round 5 Production release with real data

### Release Schedule

| Version  | Status  | Release Date  |
|----------|---------|---------------|
| OP 0.1.0 | LIVE   | June 7th |
| OP 0.1.1 | LIVE   | June 27th |
| OP 0.1.2 | LIVE   | July 22th |
| OP 0.1.3 | LIVE   | July 31th |
|----------|---------|---------------|
| OP 0.2.0 | LIVE   | Aug 10th |
| OP 0.2.1 | ON TRACK   | Aug 23th |
| OP 0.2.2 | ON TRACK   | Aug 30th |
| OP 0.2.3 | ON TRACK   | Sep 20th |
 * OpenAPI spec version: 0.1.3
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  AddImpactMetricToRetroFundingBallotBody,
  AuthToken,
  Comment,
  CommentVote,
  Contract,
  Delegate,
  Delegation,
  GetDelegateVotes200,
  GetDelegateVotesParams,
  GetDelegates200,
  GetDelegatesParams,
  GetDelegatorsByAddress200,
  GetImpactMetricComments200,
  GetImpactMetricCommentsParams,
  GetProjects200,
  GetProjectsParams,
  GetProposalVotes200,
  GetProposalVotesParams,
  GetProposals200,
  GetProposalsParams,
  GetRetroFundingRoundBallotById200,
  GetRetroFundingRoundBallots200,
  GetRetroFundingRoundBallotsParams,
  GetRetroFundingRoundProjects200,
  GetRetroFundingRoundProjectsParams,
  GetRetroFundingRounds200,
  GetRetroFundingRoundsParams,
  Project,
  Proposal,
  PutImactMetricCommentVoteBody,
  PutImpactMetricCommentBody,
  RecordImpactMetricView200,
  RetroFundingImpactMetric,
  RetroFundingRound,
  Round4Ballot,
  Round5Ballot,
  SIWEVerificationBody,
  SubmitRetroFundingBallot200,
  SubmitRetroFundingBallotBody,
  UpdateImpactMetricCommentBody,
  UpdateRetroFundingBallotDistributionMethodBody,
  UpdateRetroFundingRoundCategoryAllocationBody,
  UpdateRetroFundingRoundProjectByIdBody,
  VotingToken,
} from "./agora.schemas";

/**
 * Retrieves the full OAS/Swagger spec for the API in YAML.
 * @summary Gets this specification
 */
export const getSpec = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/spec`, options);
};

/**
 * Gets nonce for SIWE authentication.
 * @summary Gets nonce for SIWE authentication
 */
export const getNonce = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/auth/nonce`, options);
};

/**
 * Posts SIWE message and signature.
 * @summary Posts SIWE verification payload
 */
export const postSiweVerificationMessage = <TData = AxiosResponse<AuthToken>>(
  sIWEVerificationBody: SIWEVerificationBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/auth/verify`, sIWEVerificationBody, options);
};

/**
 * Retrieves a list of voting delegates on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a list of delegates
 */
export const getDelegates = <TData = AxiosResponse<GetDelegates200>>(
  params?: GetDelegatesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/delegates`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a specific delegate on Agora by address or ENS name.

 * @summary Gets a specific delegate
 */
export const getDelegateByAddress = <TData = AxiosResponse<Delegate>>(
  addressOrEnsName: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/delegates/${addressOrEnsName}`, options);
};

/**
 * Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a paginated list of votes for a delegate
 */
export const getDelegateVotes = <TData = AxiosResponse<GetDelegateVotes200>>(
  addressOrEnsName: string,
  params?: GetDelegateVotesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/delegates/${addressOrEnsName}/votes`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a list of voting proposals on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a list of proposals
 */
export const getProposals = <TData = AxiosResponse<GetProposals200>>(
  params?: GetProposalsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/proposals`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a specific voting proposal on Agora.

 * @summary Gets a specific proposal
 */
export const getProposalById = <TData = AxiosResponse<Proposal>>(
  proposalId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/proposals/${proposalId}`, options);
};

/**
 * Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a paginated list of votes for a proposal
 */
export const getProposalVotes = <TData = AxiosResponse<GetProposalVotes200>>(
  proposalId: string,
  params?: GetProposalVotesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/proposals/${proposalId}/votes`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a list of the delegatees for a given address. That is, the delegates to which the supplied address is delegating votes.

 * @summary Gets delegatees (delegating to) information for an address
 */
export const getDelegateesByAddress = <TData = AxiosResponse<Delegation>>(
  addressOrEnsName: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/delegates/${addressOrEnsName}/delegatees`, options);
};

/**
 * Retrieves a paginated list of the delegators for a given address. That is, the delegates from which the supplied address is being delegated votes.

 * @summary Gets delegator (delegating to) information for an address
 */
export const getDelegatorsByAddress = <
  TData = AxiosResponse<GetDelegatorsByAddress200>
>(
  addressOrEnsName: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/delegates/${addressOrEnsName}/delegators`, options);
};

/**
 * Retrieves the address of the governor contract on chain.

 * @summary Gets the governor contract address
 */
export const getGovernorContract = <TData = AxiosResponse<Contract>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/contracts/governor`, options);
};

/**
 * Retrieves the address of the alligator contract on chain.

 * @summary Gets the alligator contract address
 */
export const getAlligatorContract = <TData = AxiosResponse<Contract>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/contracts/alligator`, options);
};

/**
 * Retrieves the address of the voting token contract on chain.

 * @summary Gets the voting token contract address
 */
export const getVotingTokenContract = <TData = AxiosResponse<VotingToken>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/contracts/token`, options);
};

/**
 * Retrieves a list of projects on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a list of projects
 */
export const getProjects = <TData = AxiosResponse<GetProjects200>>(
  params?: GetProjectsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/projects`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a paginated list of RetroFunding rounds, ordered by round ID.

 * @summary Gets a list of RetroFunding rounds
 */
export const getRetroFundingRounds = <
  TData = AxiosResponse<GetRetroFundingRounds200>
>(
  params?: GetRetroFundingRoundsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/retrofunding/rounds`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a specific RetroFunding round on Agora.

 * @summary Gets a specific RetroFunding round
 */
export const getRetroFundingRoundById = <
  TData = AxiosResponse<RetroFundingRound>
>(
  roundId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/retrofunding/rounds/${roundId}`, options);
};

/**
 * Retrieves a list of ballots for a specific RetroFunding round on Agora as a JSON array. Limit, offset parameters can be used to customize the returned list sorted by ballot ordinal.

 * @summary Gets a list of ballots for an RetroFunding round
 */
export const getRetroFundingRoundBallots = <
  TData = AxiosResponse<GetRetroFundingRoundBallots200>
>(
  roundId: number,
  params?: GetRetroFundingRoundBallotsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/retrofunding/rounds/${roundId}/ballots`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a specific ballot for an RetroFunding round on Agora.

 * @summary Gets a specific ballot for an RetroFunding round
 */
export const getRetroFundingRoundBallotById = <
  TData = AxiosResponse<GetRetroFundingRoundBallotById200>
>(
  roundId: number,
  ballotCasterAddressOrEns: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/ballots/${ballotCasterAddressOrEns}`,
    options
  );
};

/**
 * Updates the OS only flag for a specific ballot for an RetroFunding round on Agora.

 * @summary Updates the OS only flag for a specific RetroFunding ballot
 */
export const updateRetroFundingBallotOSOnly = <
  TData = AxiosResponse<Round4Ballot>
>(
  roundId: number,
  ballotCasterAddressOrEns: string,
  osOnly: boolean,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${ballotCasterAddressOrEns}/osOnly/${osOnly}`,
    undefined,
    options
  );
};

/**
 * Submits the content of a ballot to be counted as final for the round.
 * @summary Submits a particular ballot
 */
export const submitRetroFundingBallot = <
  TData = AxiosResponse<SubmitRetroFundingBallot200>
>(
  roundId: number,
  ballotCasterAddressOrEns: string,
  submitRetroFundingBallotBody: SubmitRetroFundingBallotBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${ballotCasterAddressOrEns}/submit`,
    submitRetroFundingBallotBody,
    options
  );
};

/**
 * Retrieves a list of projects for a specific RetroFunding round on Agora as a JSON array. Limit, offset, and sort parameters can be used to customize the returned list.

 * @summary Gets a list of projects for an RetroFunding round
 */
export const getRetroFundingRoundProjects = <
  TData = AxiosResponse<GetRetroFundingRoundProjects200>
>(
  roundId: number,
  params?: GetRetroFundingRoundProjectsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/retrofunding/rounds/${roundId}/projects`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieves a specific project for a specific RetroFunding round on Agora.

 * @summary Gets a specific project for an RetroFunding round
 */
export const getRetroFundingRoundProjectById = <TData = AxiosResponse<Project>>(
  roundId: number,
  projectId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/projects/${projectId}`,
    options
  );
};

/**
 * Adds an impact metric or updates an existing impact metric's allocation amount  on a specific ballot for an RetroFunding round on Agora.

 * @summary Adds or updates an impact metric on a specific RetroFunding ballot
 */
export const addImpactMetricToRetroFundingBallot = <
  TData = AxiosResponse<Round4Ballot>
>(
  roundId: number,
  ballotCasterAddressOrEns: string,
  addImpactMetricToRetroFundingBallotBody: AddImpactMetricToRetroFundingBallotBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${ballotCasterAddressOrEns}/impactMetrics`,
    addImpactMetricToRetroFundingBallotBody,
    options
  );
};

/**
 * Updates a specific project for a specific RetroFunding round.

 * @summary Updates a specific project in ballot for a RetroFunding round
 */
export const updateRetroFundingRoundProjectById = <
  TData = AxiosResponse<Round5Ballot>
>(
  roundId: number,
  addressOrEnsName: string,
  projectId: string,
  updateRetroFundingRoundProjectByIdBody: UpdateRetroFundingRoundProjectByIdBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${addressOrEnsName}/projects/${projectId}`,
    updateRetroFundingRoundProjectByIdBody,
    options
  );
};

/**
 * Updates a specific project for a specific RetroFunding round on Agora.

 * @summary Updates a specific allocation for a RetroFunding round
 */
export const updateRetroFundingRoundCategoryAllocation = <
  TData = AxiosResponse<Round5Ballot>
>(
  roundId: number,
  addressOrEnsName: string,
  categoryId: string,
  updateRetroFundingRoundCategoryAllocationBody: UpdateRetroFundingRoundCategoryAllocationBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${addressOrEnsName}/categories/${categoryId}`,
    updateRetroFundingRoundCategoryAllocationBody,
    options
  );
};

/**
 * Updates the distribution method for a specific ballot for a RetroFunding round on Agora.

 * @summary Updates the distribution method for a specific RetroFunding ballot
 */
export const updateRetroFundingBallotDistributionMethod = <
  TData = AxiosResponse<Round5Ballot>
>(
  roundId: number,
  addressOrEnsName: string,
  updateRetroFundingBallotDistributionMethodBody: UpdateRetroFundingBallotDistributionMethodBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/ballots/${addressOrEnsName}/distribution_method`,
    updateRetroFundingBallotDistributionMethodBody,
    options
  );
};

/**
 * Removes an impact metric from a specific ballot for a RetroFunding round on Agora.

 * @summary Removes an impact metric from a ballot
 */
export const removeImpactMetricFromRetroFundingBallot = <
  TData = AxiosResponse<void>
>(
  roundId: number,
  ballotCasterAddressOrEns: string,
  impactMetricId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `/retrofunding/rounds/${roundId}/ballots/${ballotCasterAddressOrEns}/impactMetrics/${impactMetricId}`,
    options
  );
};

/**
 * Retrieves a paginated list of impact metrics for a specific RetroFunding round on Agora.

 * @summary Gets impact metrics for a specific RetroFunding round
 */
export const getImpactMetricsOnRetroFundingRound = <
  TData = AxiosResponse<RetroFundingImpactMetric[]>
>(
  roundId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/retrofunding/rounds/${roundId}/impactMetrics`, options);
};

/**
 * Retrieves a specific impact metric for a specific RetroFunding round on Agora.

 * @summary Gets a specific impact metric for an RetroFunding round
 */
export const getImpactMetricOnRetroFundingRound = <
  TData = AxiosResponse<RetroFundingImpactMetric>
>(
  roundId: number,
  impactMetricId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}`,
    options
  );
};

/**
 * Records a view of an impact metric by a specific address or ENS name

 * @summary Records a view of an impact metric
 */
export const recordImpactMetricView = <
  TData = AxiosResponse<RecordImpactMetricView200>
>(
  roundId: number,
  impactMetricId: string,
  addressOrEnsName: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/${addressOrEnsName}`,
    undefined,
    options
  );
};

/**
 * Gets a paginated list of comments on a particular impact metric. Ordered by creation date.

 * @summary Gets comments on an impact metric
 */
export const getImpactMetricComments = <
  TData = AxiosResponse<GetImpactMetricComments200>
>(
  roundId: number,
  impactMetricId: string,
  params?: GetImpactMetricCommentsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments`,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

/**
 * Creates a comment on a specific impact metric for a specific round. Returns created comment.

 * @summary Creates a comment on an impact metric
 */
export const putImpactMetricComment = <TData = AxiosResponse<Comment>>(
  roundId: number,
  impactMetricId: string,
  putImpactMetricCommentBody: PutImpactMetricCommentBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments`,
    putImpactMetricCommentBody,
    options
  );
};

/**
 * Gets a specific comment on a particular impact metric.

 * @summary Gets a specific comment on an impact metric
 */
export const getImpactMetricComment = <TData = AxiosResponse<Comment>>(
  roundId: number,
  impactMetricId: string,
  commentId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments/${commentId}`,
    options
  );
};

/**
 * Updates a comment on a specific impact metric for a specific round. Returns updated comment.

 * @summary Updates existing comment
 */
export const updateImpactMetricComment = <TData = AxiosResponse<Comment>>(
  roundId: number,
  impactMetricId: string,
  commentId: string,
  updateImpactMetricCommentBody: UpdateImpactMetricCommentBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments/${commentId}`,
    updateImpactMetricCommentBody,
    options
  );
};

/**
 * Deletes a comment on a specific impact metric for a specific round.

 * @summary Deletes a comment on an impact metric
 */
export const deleteImpactMetricComment = <TData = AxiosResponse<void>>(
  roundId: number,
  impactMetricId: string,
  commentId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments/${commentId}`,
    options
  );
};

/**
 * Gets all votes for a speciffic comment

 * @summary Gets all votes for a speciffic comment
 */
export const getImpactMetricCommentVote = <
  TData = AxiosResponse<CommentVote[]>
>(
  roundId: number,
  impactMetricId: string,
  commentId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments/${commentId}/votes`,
    options
  );
};

/**
 * Creates or updates vote for a speciffic comment. Address of the voter is taken from the auth token. Input is a number, where 1 is upvote, -1 is downvote, 0 is neutral.

 * @summary Creates or updates vote for a speciffic comment
 */
export const putImactMetricCommentVote = <TData = AxiosResponse<CommentVote>>(
  roundId: number,
  impactMetricId: string,
  commentId: string,
  putImactMetricCommentVoteBody: PutImactMetricCommentVoteBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `/retrofunding/rounds/${roundId}/impactMetrics/${impactMetricId}/comments/${commentId}/votes`,
    putImactMetricCommentVoteBody,
    options
  );
};

export type GetSpecResult = AxiosResponse<string>;
export type GetNonceResult = AxiosResponse<string>;
export type PostSiweVerificationMessageResult = AxiosResponse<AuthToken>;
export type GetDelegatesResult = AxiosResponse<GetDelegates200>;
export type GetDelegateByAddressResult = AxiosResponse<Delegate>;
export type GetDelegateVotesResult = AxiosResponse<GetDelegateVotes200>;
export type GetProposalsResult = AxiosResponse<GetProposals200>;
export type GetProposalByIdResult = AxiosResponse<Proposal>;
export type GetProposalVotesResult = AxiosResponse<GetProposalVotes200>;
export type GetDelegateesByAddressResult = AxiosResponse<Delegation>;
export type GetDelegatorsByAddressResult =
  AxiosResponse<GetDelegatorsByAddress200>;
export type GetGovernorContractResult = AxiosResponse<Contract>;
export type GetAlligatorContractResult = AxiosResponse<Contract>;
export type GetVotingTokenContractResult = AxiosResponse<VotingToken>;
export type GetProjectsResult = AxiosResponse<GetProjects200>;
export type GetRetroFundingRoundsResult =
  AxiosResponse<GetRetroFundingRounds200>;
export type GetRetroFundingRoundByIdResult = AxiosResponse<RetroFundingRound>;
export type GetRetroFundingRoundBallotsResult =
  AxiosResponse<GetRetroFundingRoundBallots200>;
export type GetRetroFundingRoundBallotByIdResult =
  AxiosResponse<GetRetroFundingRoundBallotById200>;
export type UpdateRetroFundingBallotOSOnlyResult = AxiosResponse<Round4Ballot>;
export type SubmitRetroFundingBallotResult =
  AxiosResponse<SubmitRetroFundingBallot200>;
export type GetRetroFundingRoundProjectsResult =
  AxiosResponse<GetRetroFundingRoundProjects200>;
export type GetRetroFundingRoundProjectByIdResult = AxiosResponse<Project>;
export type AddImpactMetricToRetroFundingBallotResult =
  AxiosResponse<Round4Ballot>;
export type UpdateRetroFundingRoundProjectByIdResult =
  AxiosResponse<Round5Ballot>;
export type UpdateRetroFundingRoundCategoryAllocationResult =
  AxiosResponse<Round5Ballot>;
export type UpdateRetroFundingBallotDistributionMethodResult =
  AxiosResponse<Round5Ballot>;
export type RemoveImpactMetricFromRetroFundingBallotResult =
  AxiosResponse<void>;
export type GetImpactMetricsOnRetroFundingRoundResult = AxiosResponse<
  RetroFundingImpactMetric[]
>;
export type GetImpactMetricOnRetroFundingRoundResult =
  AxiosResponse<RetroFundingImpactMetric>;
export type RecordImpactMetricViewResult =
  AxiosResponse<RecordImpactMetricView200>;
export type GetImpactMetricCommentsResult =
  AxiosResponse<GetImpactMetricComments200>;
export type PutImpactMetricCommentResult = AxiosResponse<Comment>;
export type GetImpactMetricCommentResult = AxiosResponse<Comment>;
export type UpdateImpactMetricCommentResult = AxiosResponse<Comment>;
export type DeleteImpactMetricCommentResult = AxiosResponse<void>;
export type GetImpactMetricCommentVoteResult = AxiosResponse<CommentVote[]>;
export type PutImactMetricCommentVoteResult = AxiosResponse<CommentVote>;
